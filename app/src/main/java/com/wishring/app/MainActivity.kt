package com.wishring.app

import android.annotation.SuppressLint
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothGatt
import android.bluetooth.BluetoothGattCallback
import android.bluetooth.BluetoothGattCharacteristic
import android.bluetooth.BluetoothGattDescriptor
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothProfile
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Build
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.ui.Modifier
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.navigation.compose.rememberNavController
import com.manridy.sdk_mrd2019.Manridy
import com.manridy.sdk_mrd2019.bean.send.SystemEnum
import com.manridy.sdk_mrd2019.install.MrdPushCore
import com.wishring.app.ble.model.BatteryDataModel
import com.wishring.app.core.util.SimpleBlePermissionManager
import com.wishring.app.data.ble.model.BleConstants
import com.wishring.app.data.repository.PreferencesRepository
import com.wishring.app.presentation.main.BlePhase
import com.wishring.app.presentation.main.MainViewModel
import com.wishring.app.presentation.navigation.WishRingNavGraph
import com.wishring.app.ui.theme.WishRingTheme
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.Json
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Date
import java.util.Locale
import java.util.TimeZone
import java.util.UUID
import javax.inject.Inject

@AndroidEntryPoint
@SuppressLint("MissingPermission")
class MainActivity : ComponentActivity() {

    // BLE Í¥ÄÎ†® ÌïÑÎìú
    private var bluetoothAdapter: BluetoothAdapter? = null
    private var discoveryReceiver: BroadcastReceiver? = null
    private var discoveryStartTime: Long = 0L
    private var discoveredDevicesCount = 0
    private var bluetoothGatt: BluetoothGatt? = null

    // BLE Scan fields

    private val discoveredDevices = mutableSetOf<String>() // Ï§ëÎ≥µ Î∞©ÏßÄ
    private var h13Device: BluetoothDevice? = null
    private var batteryPollingJob: Job? = null // Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ Job Í¥ÄÎ¶¨
    private var isH13Connected = false // H13 Í∏∞Í∏∞ Ïó∞Í≤∞ ÏÉÅÌÉú

    private lateinit var blePermissionManager: SimpleBlePermissionManager
    private val mainViewModel: MainViewModel by viewModels()


    @Inject
    lateinit var preferencesRepository: PreferencesRepository


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        blePermissionManager = SimpleBlePermissionManager(this)

        initBluetooth()

        observeBleStateChanges()

        setContent {
            WishRingTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    val navController = rememberNavController()
                    WishRingNavGraph(
                        navController = navController,
                        mainViewModel = mainViewModel
                    )
                }
            }
        }
    }

    private fun initBluetooth() {
        val bluetoothManager = getSystemService(BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothAdapter = bluetoothManager.adapter
        Log.i(WR_EVENT, "[MainActivity] Bluetooth Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
    }

    fun startClassicDiscovery() {
        Log.i(WR_EVENT, "[MainActivity] ========== Classic Bluetooth Discovery ÏãúÏûë ==========")

        // Ïù¥ÎØ∏ Discovery ÏßÑÌñâ Ï§ëÏù¥Î©¥ Ïä§ÌÇµ
        if (discoveryReceiver != null || bluetoothAdapter?.isDiscovering == true) {
            Log.w(WR_EVENT, "[MainActivity] DiscoveryÍ∞Ä Ïù¥ÎØ∏ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§ - Ïä§ÌÇµ")
            return
        }

        if (bluetoothAdapter?.isEnabled != true) {
            Log.e(WR_EVENT, "[MainActivity] Î∏îÎ£®Ìà¨Ïä§Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎê®")
            return
        }

        // Ï§ëÎ≥µ Î∞©ÏßÄ Ï¥àÍ∏∞Ìôî
        discoveredDevices.clear()
        discoveredDevicesCount = 0
        discoveryStartTime = System.currentTimeMillis()
        Log.i(WR_EVENT, "[MainActivity] Discovery ÏãúÏûë ÏãúÍ∞Ñ: $discoveryStartTime")

        // BroadcastReceiver ÏÉùÏÑ±
        discoveryReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context, intent: Intent) {
                when (intent.action) {
                    BluetoothDevice.ACTION_FOUND -> {
                        val device = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                            intent.getParcelableExtra(
                                BluetoothDevice.EXTRA_DEVICE,
                                BluetoothDevice::class.java
                            )
                        } else {
                            intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)
                        }

                        val rssi = intent
                            .getShortExtra(BluetoothDevice.EXTRA_RSSI, Short.MIN_VALUE)
                            .toInt()

                        device?.let { bluetoothDevice ->
                            if (!discoveredDevices.contains(bluetoothDevice.address)) {
                                discoveredDevices.add(bluetoothDevice.address)
                                discoveredDevicesCount++

                                val deviceName = bluetoothDevice.name ?: "Unknown"

                                // H13 Í∏∞Í∏∞ ÌôïÏù∏ (Ïù¥Î¶ÑÏúºÎ°ú ÌåêÎã®)
                                val isH13Device =
                                    deviceName.contains("H13", ignoreCase = true) ||
                                            deviceName.contains("WISH", ignoreCase = true)

                                if (isH13Device) {
                                    Log.i(
                                        WR_EVENT,
                                        "[MainActivity] ‚úÖ H13 Í∏∞Í∏∞Î°ú Ï∂îÏ†ïÎê® - MainViewModelÏóê Ï†ÑÎã¨"
                                    )
                                    // Service UUIDÎäî Ïó∞Í≤∞ ÌõÑ ÌôïÏù∏ Í∞ÄÎä•ÌïòÎØÄÎ°ú Í∞ÄÏßú UUID Ï†ÑÎã¨
                                    val serviceUuids = listOf(BleConstants.SERVICE_UUID.toString())
                                    mainViewModel.addScannedDevice(
                                        deviceName,
                                        bluetoothDevice.address,
                                        rssi,
                                        serviceUuids
                                    )

                                    Log.i(WR_EVENT, "[MainActivity] üéØ H13 Î∞úÍ≤¨! Discovery Ï¶âÏãú Ï§ëÏßÄ")
                                    bluetoothAdapter?.cancelDiscovery()
                                }
                            }
                        }
                    }

                    BluetoothAdapter.ACTION_DISCOVERY_STARTED -> {
                        Log.i(WR_EVENT, "[MainActivity] Classic Discovery ÏãúÏûëÎê®")
                        // Discovery ÏãúÏûë ÏãúÍ∞Ñ Í∞±Ïã†
                        discoveryStartTime = System.currentTimeMillis()
                        discoveredDevicesCount = 0
                    }

                    BluetoothAdapter.ACTION_DISCOVERY_FINISHED -> {
                        val duration = System.currentTimeMillis() - discoveryStartTime
                        Log.i(WR_EVENT, "[MainActivity] Classic Discovery ÏôÑÎ£åÎê®")
                        Log.i(WR_EVENT, "[MainActivity] - ÏÜåÏöî ÏãúÍ∞Ñ: ${duration}ms")
                        Log.i(WR_EVENT, "[MainActivity] - Î∞úÍ≤¨Îêú Í∏∞Í∏∞ Ïàò: $discoveredDevicesCount")
                        Log.i(
                            WR_EVENT,
                            "[MainActivity] - Ïä§Ï∫îÎêú Í∏∞Í∏∞ Î™©Î°ù: ${discoveredDevices.joinToString()}"
                        )

                        // ÎÑàÎ¨¥ Îπ®Î¶¨ Ï¢ÖÎ£åÎêòÎ©¥ Î¨¥Ïãú (Ï†ïÏÉÅÏ†ÅÏù∏ DiscoveryÎäî ÏµúÏÜå 10Ï¥à)
                        if (duration < 1000) {
                            Log.w(WR_EVENT, "[MainActivity] DiscoveryÍ∞Ä ÎÑàÎ¨¥ Îπ®Î¶¨ Ï¢ÖÎ£åÎê® - Î¨¥Ïãú")
                            return
                        }

                        // Discovery ÏôÑÎ£å Ïãú UI ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                        mainViewModel.onDiscoveryFinished()
                    }
                }
            }
        }

        // BroadcastReceiver Îì±Î°ù
        val filter = IntentFilter().apply {
            addAction(BluetoothDevice.ACTION_FOUND)
            addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED)
            addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)
        }
        try {
            registerReceiver(discoveryReceiver, filter)
            Log.i(WR_EVENT, "[MainActivity] Discovery BroadcastReceiver Îì±Î°ùÎê®")
        } catch (e: Exception) {
            Log.e(WR_EVENT, "[MainActivity] BroadcastReceiver Îì±Î°ù Ïã§Ìå®", e)
            discoveryReceiver = null
            return
        }

        // Ïù¥ÎØ∏ ÏßÑÌñâ Ï§ëÏù∏ Discovery Ï∑®ÏÜå
        if (bluetoothAdapter?.isDiscovering == true) {
            bluetoothAdapter?.cancelDiscovery()
            Log.i(WR_EVENT, "[MainActivity] Í∏∞Ï°¥ Discovery Ï∑®ÏÜå")
            // Ï∑®ÏÜå ÌõÑ Ïû†Ïãú ÎåÄÍ∏∞
            Thread.sleep(100)
        }

        // Classic Bluetooth Discovery ÏãúÏûë
        val discoveryStarted = bluetoothAdapter?.startDiscovery() ?: false
        Log.i(WR_EVENT, "[MainActivity] Classic Discovery ÏãúÏûë Í≤∞Í≥º: $discoveryStarted")
        Log.i(WR_EVENT, "[MainActivity] isDiscovering ÏÉÅÌÉú: ${bluetoothAdapter?.isDiscovering}")

        // 3Ï¥à ÌõÑ ÏûêÎèô Ï§ëÏßÄ ÌÉÄÏù¥Î®∏
        lifecycleScope.launch {
            delay(30000) // ÏµúÎåÄ 10Ï¥àÎßå Ïä§Ï∫î
            if (bluetoothAdapter?.isDiscovering == true) {
                Log.i(WR_EVENT, "[MainActivity] Discovery ÌÉÄÏûÑÏïÑÏõÉ (30Ï¥à) - ÏûêÎèô Ï§ëÏßÄ")
                bluetoothAdapter?.cancelDiscovery()
            }
        }

        if (!discoveryStarted) {
            Log.e(WR_EVENT, "[MainActivity] Discovery ÏãúÏûë Ïã§Ìå®")
            stopClassicDiscovery()
        }
    }

    fun stopClassicDiscovery() {
        Log.i(WR_EVENT, "[MainActivity] Classic Discovery Ï§ëÏßÄ ÏöîÏ≤≠")

        try {
            discoveryReceiver?.let {
                try {
                    unregisterReceiver(it)
                    Log.i(WR_EVENT, "[MainActivity] Discovery BroadcastReceiver Ìï¥Ï†úÎê®")
                } catch (e: Exception) {
                    Log.e(WR_EVENT, "[MainActivity] BroadcastReceiver Ìï¥Ï†ú Ï§ë Ïò§Î•ò", e)
                }
                discoveryReceiver = null
            }

            // Í∂åÌïú Ï≤¥ÌÅ¨ ÌõÑ isDiscovering ÌôïÏù∏
            val hasPermission = try {
                bluetoothAdapter?.isDiscovering
                true
            } catch (e: SecurityException) {
                false
            }
            
            if (hasPermission) {
                if (bluetoothAdapter?.isDiscovering == true) {
                    bluetoothAdapter?.cancelDiscovery()
                    Log.i(WR_EVENT, "[MainActivity] Classic Discovery Ï§ëÏßÄÎê®")
                }
            } else {
                Log.i(WR_EVENT, "[MainActivity] BLUETOOTH_SCAN Í∂åÌïú ÏóÜÏùå - Discovery Ï≤¥ÌÅ¨ Ïä§ÌÇµ")
            }
        } catch (e: SecurityException) {
            Log.e(WR_EVENT, "[MainActivity] Discovery Ï§ëÏßÄ Ï§ë Í∂åÌïú Ïò§Î•ò", e)
        }

        Log.i(WR_EVENT, "[MainActivity] ÌòÑÏû¨ discoveredDevices: ${discoveredDevices.joinToString()}")
    }

    // BLE Ïä§Ï∫î ÏãúÏûë
    fun startBleScan() {
        Log.i(WR_EVENT, "[MainActivity] ========== BLE Ïä§Ï∫î ÏãúÏûë ÏöîÏ≤≠ ==========")

        blePermissionManager.requestBluetoothSetup(
            onPermissionsGranted = {
                Log.i(WR_EVENT, "[MainActivity] Î™®Îì† Í∂åÌïú Î∞è ÏÑ§Ï†ï ÏôÑÎ£å, BLE Ïä§Ï∫î ÏãúÏûë")
                // MainViewModel ÏÉÅÌÉú Î≥ÄÍ≤Ω ‚Üí Ïù¥Í≤ÉÏù¥ startClassicDiscovery()Î•º Ìä∏Î¶¨Í±∞Ìï®
                mainViewModel.startBleScan()
            },
            onPermissionsDenied = {
                Log.e(WR_EVENT, "[MainActivity] Í∂åÌïú Í±∞Î∂ÄÎê®")
            }
        )
    }

    private fun actuallyConnectToDevice(address: String) {

        // Ïä§Ï∫î Ï§ëÏßÄ - MainViewModelÏùÑ ÌÜµÌï¥ Ï≤òÎ¶¨
        mainViewModel.stopBleScan()

        // BluetoothAdapterÎ°ú device Ï∞æÍ∏∞
        try {
            val device = bluetoothAdapter?.getRemoteDevice(address)
            if (device != null) {
                Log.i(WR_EVENT, "[MainActivity] Í∏∞Í∏∞ Ï∞æÏùå: ${device.name ?: "Unknown"} ($address)")
                connectToDevice(device)
            } else {
                Log.e(WR_EVENT, "[MainActivity] Í∏∞Í∏∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå: $address")
            }
        } catch (e: IllegalArgumentException) {
            Log.e(WR_EVENT, "[MainActivity] ÏûòÎ™ªÎêú Î∏îÎ£®Ìà¨Ïä§ Ï£ºÏÜå: $address", e)
        }
    }

    private val gattCallback = object : BluetoothGattCallback() {
        override fun onConnectionStateChange(gatt: BluetoothGatt?, status: Int, newState: Int) {
            // status ÏΩîÎìú ÎîîÎ≤ÑÍπÖ
            Log.i(WR_EVENT, "[MainActivity] onConnectionStateChange - status: $status, newState: $newState")
            when (status) {
                BluetoothGatt.GATT_SUCCESS -> Log.i(WR_EVENT, "[MainActivity] GATT ÏûëÏóÖ ÏÑ±Í≥µ")
                133 -> Log.e(WR_EVENT, "[MainActivity] ‚ùå GATT ERROR 133: Ïó∞Í≤∞ Ïã§Ìå® - Í∏∞Í∏∞ Ïû¨ÏãúÏûë ÎòêÎäî ÌéòÏñ¥ÎßÅ ÌïÑÏöî")
                8 -> Log.e(WR_EVENT, "[MainActivity] ‚ùå GATT ERROR 8: Ïó∞Í≤∞ ÏãúÍ∞Ñ Ï¥àÍ≥º")
                19 -> Log.e(WR_EVENT, "[MainActivity] ‚ùå GATT ERROR 19: Í∏∞Í∏∞ÏóêÏÑú Ïó∞Í≤∞ Í±∞Î∂Ä")
                22 -> Log.e(WR_EVENT, "[MainActivity] ‚ùå GATT ERROR 22: Í∏∞Í∏∞Í∞Ä Ïó∞Í≤∞ Ï¢ÖÎ£å")
                else -> Log.e(WR_EVENT, "[MainActivity] ‚ùå GATT ERROR $status")
            }
            
            when (newState) {
                BluetoothProfile.STATE_CONNECTED -> {
                    Log.i(WR_EVENT, "[MainActivity] GATT Ïó∞Í≤∞Îê®")

                    // Ïó∞Í≤∞Îêú Í∏∞Í∏∞ Ï†ïÎ≥¥ Ï†ÄÏû•
                    gatt?.device?.let { device ->
                        lifecycleScope.launch {
                            mainViewModel.onDeviceConnected(
                                deviceAddress = device.address,
                                deviceName = device.name ?: "Unknown"
                            )
                        }
                    }

                    runOnUiThread {
                        mainViewModel.updateConnectionState(true)
                    }
                    // MRD SDKÏóê GATT Ï†ÑÎã¨
                    gatt?.let {
                        // TODO: Ïã§Ï†ú MRD SDK ÌÜµÌï©Ïãú Ï£ºÏÑù Ìï¥Ï†ú
                        // mrdManager?.setBluetoothGatt(it)
                        it.discoverServices()
                    }
                }

                BluetoothProfile.STATE_DISCONNECTED -> {
                    Log.i(WR_EVENT, "[MainActivity] GATT Ïó∞Í≤∞ ÎÅäÍπÄ (status: $status)")
                    
                    // Ïó∞Í≤∞ Ïã§Ìå® ÏõêÏù∏Î≥Ñ Ï≤òÎ¶¨
                    when (status) {
                        133 -> {
                            Log.e(WR_EVENT, "[MainActivity] üì± ERROR 133 - 1Ï¥à ÌõÑ Ïû¨ÏãúÎèÑÌï©ÎãàÎã§...")
                            lifecycleScope.launch {
                                delay(1000)
                                h13Device?.let {
                                    Log.i(WR_EVENT, "[MainActivity] Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...")
                                    connectToDevice(it)
                                }
                            }
                        }
                        else -> Log.i(WR_EVENT, "[MainActivity] Ïó∞Í≤∞ Ï¢ÖÎ£å (status: $status)")
                    }
                    
                    // H13 Ïó∞Í≤∞ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Î∞è Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ Ï§ëÏßÄ
                    isH13Connected = false
                    batteryPollingJob?.cancel()
                    batteryPollingJob = null
                    Log.i(WR_EVENT, "[BATTERY_DEBUG] Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ Ï§ëÏßÄÎê®")

                    runOnUiThread {
                        mainViewModel.updateConnectionState(false)
                    }
                    gatt?.close()
                    bluetoothGatt = null
                }
            }
        }

        override fun onCharacteristicChanged(
            gatt: BluetoothGatt,
            characteristic: BluetoothGattCharacteristic
        ) {
            val data = characteristic.value

            // ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Î°úÍπÖ
            Log.i(WR_EVENT, "[BATTERY_DEBUG] ======= BLE Îç∞Ïù¥ÌÑ∞ ÏàòÏã† =======")
            Log.i(WR_EVENT, "[BATTERY_DEBUG] ÏãúÍ∞Ñ: ${System.currentTimeMillis()}")
            Log.i(WR_EVENT, "[BATTERY_DEBUG] UUID: ${characteristic.uuid}")
            Log.i(WR_EVENT, "[BATTERY_DEBUG] HEX: ${data.toHexString()}")
            Log.i(WR_EVENT, "[BATTERY_DEBUG] ÌÅ¨Í∏∞: ${data.size} bytes")

            // Î∞∞ÌÑ∞Î¶¨ Îç∞Ïù¥ÌÑ∞ Ìå®ÌÑ¥ Ï≤¥ÌÅ¨
            if (data.size >= 9 && data[0] == 0x0F.toByte() && data[1] == 0x06.toByte()) {
                Log.i(WR_EVENT, "[BATTERY_DEBUG] *** Î∞∞ÌÑ∞Î¶¨ Îç∞Ïù¥ÌÑ∞ Ìå®ÌÑ¥ Í∞êÏßÄ! ***")
            }

            lifecycleScope.launch(Dispatchers.Main) {
                try {
                    // MRD SDKÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
                    MrdPushCore.getInstance().readData(data)

                    // MRD SDKÎ°ú ÌååÏã±Îêú Îç∞Ïù¥ÌÑ∞ ÌöçÎìù
                    val readRequest = Manridy.getMrdRead().read(data)
                    val readEnum = readRequest?.mrdReadEnum
                    val jsonData = readRequest?.json

                    Log.i(WR_EVENT, "[MainActivity] MRD SDK ÌååÏã± Í≤∞Í≥º")
                    Log.i(WR_EVENT, "[MainActivity] - Type: $readEnum")
                    Log.i(WR_EVENT, "[MainActivity] - Data: $jsonData")

                    // Enum Í∞íÏùÑ Î¨∏ÏûêÏó¥Î°ú ÎπÑÍµê (SDK enum Ïù¥Ïäà ÌöåÌîº)
                    when (readEnum?.toString()) {
                        "BATTERY", "battery" -> {
                            val json = Json { ignoreUnknownKeys = true }
                            val batteryLevel = try {
                                json.decodeFromString<BatteryDataModel>(jsonData.orEmpty()).battery
                            } catch (e: Exception) {
                                Log.e(WR_EVENT, "[BATTERY_DEBUG] JSON ÌååÏã± Ïã§Ìå®: $jsonData", e)
                                0
                            }
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] ======= Î∞∞ÌÑ∞Î¶¨ Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÏãúÏûë =======")
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] 1. MRD SDK readEnum: $readEnum")
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] 2. MRD SDK jsonData: $jsonData")
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] 3. ÌååÏã±Îêú Î∞∞ÌÑ∞Î¶¨ Î†àÎ≤®: ${batteryLevel}%")
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] 4. MainViewModel ÏóÖÎç∞Ïù¥Ìä∏ Ìò∏Ï∂ú...")
                            mainViewModel.updateBatteryLevel(batteryLevel)
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] 5. MainViewModel ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] ======= Î∞∞ÌÑ∞Î¶¨ Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÏôÑÎ£å =======")
                        }

                        "KEY", "key", "button" -> {
                            // Î≤ÑÌäº Ïù¥Î≤§Ìä∏
                            Log.i(WR_EVENT, "[MainActivity] üîò Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Í∞êÏßÄ")
                            Log.i(WR_EVENT, "[MainActivity] - Î≤ÑÌäº Îç∞Ïù¥ÌÑ∞: $jsonData")
                        }

                        "HEART", "heart" -> {
                            Log.i(WR_EVENT, "[MainActivity] ‚ù§Ô∏è Ïã¨Î∞ï Îç∞Ïù¥ÌÑ∞: $jsonData")
                        }

                        "STEP", "step" -> {
                            Log.i(WR_EVENT, "[MainActivity] üëü Í±∏ÏùåÏàò Îç∞Ïù¥ÌÑ∞: $jsonData")
                        }

                        "RESET", "reset" -> {
                            Log.i(WR_EVENT, "[MainActivity] üîÑ Î¶¨ÏÖã Ïù¥Î≤§Ìä∏ Í∞êÏßÄ")
                        }

                        else -> {
                            Log.d(WR_EVENT, "[MainActivity] ‚ùì Í∏∞ÌÉÄ Ïù¥Î≤§Ìä∏: $readEnum - $jsonData")
                        }
                    }
                } catch (e: Exception) {
                    Log.e(WR_EVENT, "[MainActivity] MRD SDK Ï≤òÎ¶¨ Ïã§Ìå®", e)

                    if (data.size >= 9 && data[0] == 0x0F.toByte() && data[1] == 0x06.toByte()) {
                        val batteryLevel = data[8].toInt() and 0xFF
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] ======= Ìè¥Î∞± Î∞∞ÌÑ∞Î¶¨ ÌååÏã± =======")
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Ìè¥Î∞± 1. ÏõêÏãú Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞: ${data.size}")
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Ìè¥Î∞± 2. Ìó§Îçî ÌôïÏù∏: 0x0F, 0x06")
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Ìè¥Î∞± 3. Î∞∞ÌÑ∞Î¶¨ Í∞í ÏúÑÏπò [8]: ${data[8]}")
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Ìè¥Î∞± 4. ÌååÏã±Îêú Î∞∞ÌÑ∞Î¶¨: $batteryLevel%")
                        mainViewModel.updateBatteryLevel(batteryLevel)
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] ======= Ìè¥Î∞± ÌååÏã± ÏôÑÎ£å =======")
                    }
                }
            }
        }

        override fun onDescriptorWrite(
            gatt: BluetoothGatt,
            descriptor: BluetoothGattDescriptor,
            status: Int
        ) {
            super.onDescriptorWrite(gatt, descriptor, status)
            
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.i(WR_EVENT, "[BATTERY_DEBUG] ‚úÖ Descriptor Ïì∞Í∏∞ ÏÑ±Í≥µ: ${descriptor.uuid}")

                if (descriptor.uuid == UUID.fromString("00002902-0000-1000-8000-00805f9b34fb")) {
                    Log.i(WR_EVENT, "[BATTERY_DEBUG] Notification ÏÑ§Ï†ï ÏôÑÎ£å!")

                    lifecycleScope.launch {
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] 2. Ï¥àÍ∏∞ Î∞∞ÌÑ∞Î¶¨ ÏöîÏ≤≠")
                        requestBatteryLevel()

                        Log.i(WR_EVENT, "[TIME_SYNC] ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî ÌÖåÏä§Ìä∏ ÏãúÏûë")
                        syncDeviceTime()
                        
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] 4. Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ ÏãúÏûë")
                        startBatteryPolling()
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== Ï¥àÍ∏∞Ìôî ÏôÑÎ£å =====")
                    }
                }
            } else {
                Log.e(WR_EVENT, "[BATTERY_DEBUG] ‚ùå Descriptor Ïì∞Í∏∞ Ïã§Ìå®: status=$status")
            }
        }

        override fun onServicesDiscovered(gatt: BluetoothGatt?, status: Int) {
            if (status == BluetoothGatt.GATT_SUCCESS && gatt != null) {
                Log.i(WR_EVENT, "[MainActivity] ÏÑúÎπÑÏä§ Î∞úÍ≤¨ ÏôÑÎ£å")

                // H13 Í∏∞Í∏∞Ïù∏ÏßÄ ÌôïÏù∏
                if (isH13Device(gatt)) {
                    Log.i(WR_EVENT, "[MainActivity] ‚úÖ H13 Í∏∞Í∏∞ ÌôïÏù∏Îê® - Î∞∞ÌÑ∞Î¶¨ Í¥ÄÎ†® Í∏∞Îä• ÏãúÏûë")
                    isH13Connected = true

                    // H13 Í∏∞Í∏∞Ïùº ÎïåÎßå Ï¥àÍ∏∞Ìôî ÏûëÏóÖ ÏãúÏûë
                    lifecycleScope.launch {
                        // Notification ÏÑ§Ï†ïÎßå ÌïòÍ≥†, ÎÇòÎ®∏ÏßÄÎäî onDescriptorWrite ÏΩúÎ∞±ÏóêÏÑú Ï≤òÎ¶¨
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== H13 ÏÑúÎπÑÏä§ Î∞úÍ≤¨ =====")
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] 1. Notification ÏÑ§Ï†ï ÏãúÏûë")
                        setupNotifications(gatt)
                        // ÎÇòÎ®∏ÏßÄ ÏûëÏóÖÏùÄ onDescriptorWrite ÏΩúÎ∞±ÏóêÏÑú ÏûêÎèô ÏßÑÌñâÎê®
                    }
                } else {
                    Log.i(WR_EVENT, "[MainActivity] ‚ùå H13 Í∏∞Í∏∞Í∞Ä ÏïÑÎãò - Î∞∞ÌÑ∞Î¶¨ Í∏∞Îä• ÎπÑÌôúÏÑ±Ìôî")
                    isH13Connected = false
                }
            }
        }
    }

    // ÎîîÎ∞îÏù¥Ïä§ Ïó∞Í≤∞ (Í∞úÏÑ† Î≤ÑÏ†Ñ)
    private fun connectToDevice(device: BluetoothDevice) {
        h13Device = device
        Log.i(WR_EVENT, "[MainActivity] Í∏∞Í∏∞ Ïó∞Í≤∞ ÏãúÏûë: ${device.address} - ${device.name ?: "Unknown"}")
        
        // Ïù¥Ï†Ñ Ïó∞Í≤∞ Ï†ïÎ¶¨
        bluetoothGatt?.let {
            Log.i(WR_EVENT, "[MainActivity] Ïù¥Ï†Ñ GATT Ïó∞Í≤∞ Ï†ïÎ¶¨")
            it.close()
            bluetoothGatt = null
        }

        try {
            Log.i(WR_EVENT, "[MainActivity] connectGatt Ìò∏Ï∂ú - autoConnect: false (Ï¶âÏãú Ïó∞Í≤∞)")
            bluetoothGatt = device.connectGatt(this, false, gattCallback)
        } catch (e: SecurityException) {
            Log.e(WR_EVENT, "[MainActivity] Î∏îÎ£®Ìà¨Ïä§ Ïó∞Í≤∞ Í∂åÌïú ÏóÜÏùå", e)
            // Í∂åÌïúÏù¥ ÏóÜÏúºÎ©¥ Îã§Ïãú Í∂åÌïú ÏöîÏ≤≠ flow ÏãúÏûë
            blePermissionManager.requestBluetoothSetup(
                onPermissionsGranted = {
                    // ÏòàÏô∏Ï≤òÎ¶¨ Í∂åÌïú ÏäπÏù∏ Ïãú ÌîåÎûòÍ∑∏ Î¶¨ÏÖã (ÏïàÏ†ÑÏû•Ïπò)
                    connectToDevice(device)
                },
                onPermissionsDenied = {
                    Log.e(WR_EVENT, "[MainActivity] Í∂åÌïú Í±∞Î∂ÄÎê®")
                    // ÏòàÏô∏Ï≤òÎ¶¨ Í∂åÌïú Í±∞Î∂Ä Ïãú ÌîåÎûòÍ∑∏ Î¶¨ÏÖã (ÏïàÏ†ÑÏû•Ïπò)
                }
            )
        }
    }

    private suspend fun setupNotifications(gatt: BluetoothGatt) = withContext(Dispatchers.IO) {
        try {
            Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== setupNotifications ÏãúÏûë =====")

            val service = gatt.getService(BleConstants.SERVICE_UUID)
            val characteristic = service?.getCharacteristic(BleConstants.COUNTER_CHAR_UUID)

            Log.i(WR_EVENT, "[BATTERY_DEBUG] Service UUID: ${BleConstants.SERVICE_UUID}")
            Log.i(WR_EVENT, "[BATTERY_DEBUG] Counter UUID: ${BleConstants.COUNTER_CHAR_UUID}")
            Log.i(WR_EVENT, "[BATTERY_DEBUG] ÏÑúÎπÑÏä§ Ï∞æÏùå: ${service != null}")
            Log.i(WR_EVENT, "[BATTERY_DEBUG] ÌäπÏÑ± Ï∞æÏùå: ${characteristic != null}")

            characteristic?.let {
                // 1. Android Ïï±Ïóê notification Î∞õÏùÑ Ï§ÄÎπÑ
                val result = gatt.setCharacteristicNotification(it, true)
                Log.i(WR_EVENT, "[BATTERY_DEBUG] 1. setCharacteristicNotification Í≤∞Í≥º: $result")

                // 2. CCCD descriptorÏóê ENABLE_NOTIFICATION ÏÑ§Ï†ï
                val descriptor =
                    it.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"))
                Log.i(WR_EVENT, "[BATTERY_DEBUG] 2. CCCD Descriptor Ï∞æÏùå: ${descriptor != null}")

                descriptor?.let { desc ->
                    desc.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
                    Log.i(WR_EVENT, "[BATTERY_DEBUG] 3. ENABLE_NOTIFICATION_VALUE ÏÑ§Ï†ï")

                    val writeResult = gatt.writeDescriptor(desc)
                    Log.i(WR_EVENT, "[BATTERY_DEBUG] 4. writeDescriptor Í≤∞Í≥º: $writeResult")

                    if (writeResult) {
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] ‚úÖ Notification ÏÑ§Ï†ï ÏÑ±Í≥µ")
                    } else {
                        Log.e(WR_EVENT, "[BATTERY_DEBUG] ‚ùå Notification ÏÑ§Ï†ï Ïã§Ìå®")
                    }
                } ?: Log.e(WR_EVENT, "[BATTERY_DEBUG] CCCD DescriptorÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
            } ?: Log.e(WR_EVENT, "[BATTERY_DEBUG] CharacteristicÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå")

            Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== setupNotifications ÏôÑÎ£å =====")
        } catch (e: Exception) {
            Log.e(WR_EVENT, "[BATTERY_DEBUG] Notification ÏÑ§Ï†ï ÏòàÏô∏ Î∞úÏÉù", e)
        }
    }

    /**
     * BLE ÏÉÅÌÉú Î≥ÄÌôî Í¥ÄÏ∞∞ Î∞è Ï≤òÎ¶¨
     */
    private fun observeBleStateChanges() {
        Log.i(WR_EVENT, "[MainActivity] observeBleStateChanges() ÏãúÏûëÎê®")
        lifecycleScope.launch {
            Log.i(WR_EVENT, "[MainActivity] Coroutine ÏãúÏûë - bleUiState collect ÏãúÏûë")
            mainViewModel.bleCommand.collect { bleState ->
                Log.i(WR_EVENT, "[MainActivity] BLE ÏÉÅÌÉú Î≥ÄÌôî Í∞êÏßÄ: ${bleState.phase}")

                when (bleState.phase) {
                    BlePhase.AutoConnecting -> {
                        if (!bleState.isConnected) {
                            Log.i(WR_EVENT, "[MainActivity] ÏûêÎèô Ïó∞Í≤∞ ÏãúÎèÑ ÏãúÏûë")
                            performAutoConnect()
                        }
                    }

                    BlePhase.Connecting -> {
                        Log.i(WR_EVENT, "[MainActivity] ÏàòÎèô Ïó∞Í≤∞ ÏãúÎèÑ ÏãúÏûë")
                        // ÏàòÎèô Ïó∞Í≤∞ÏùÄ Î≥ÑÎèÑ Ï≤òÎ¶¨ (Í∏∞Í∏∞ ÏÑ†ÌÉù ÌõÑ)
                    }

                    BlePhase.Scanning -> {
                        Log.i(WR_EVENT, "[MainActivity] Ïä§Ï∫î ÏÉÅÌÉú Í∞êÏßÄ - Classic Discovery ÏãúÏûë")
                        startClassicDiscovery()
                    }
                    
                    BlePhase.DeviceSelected -> {
                        Log.i(WR_EVENT, "[MainActivity] Í∏∞Í∏∞ ÏÑ†ÌÉùÎê® - Ïó∞Í≤∞ Ï§ÄÎπÑÏ§ë")
                        // Ïó∞Í≤∞ Ï§ÄÎπÑ Ï§ë - Classic Discovery Ï§ëÏßÄ
                        stopClassicDiscovery()
                    }

                    BlePhase.Idle -> {
                        Log.i(WR_EVENT, "[MainActivity] BLE ÎåÄÍ∏∞ ÏÉÅÌÉú - Classic Discovery Ï§ëÏßÄ")
                        stopClassicDiscovery()
                    }
                    
                    BlePhase.Connected -> {
                        Log.i(WR_EVENT, "[MainActivity] BLE Ïó∞Í≤∞ ÏôÑÎ£å - Ï¥àÍ∏∞Ìôî ÏãúÏûë")
                        // Ï¥àÍ∏∞Ìôî ÏûëÏóÖ ÏãúÏûë
                    }
                    
                    BlePhase.Initializing -> {
                        Log.i(WR_EVENT, "[MainActivity] BLE Ï¥àÍ∏∞Ìôî Ï§ë")
                        // Ï¥àÍ∏∞Ìôî ÏßÑÌñâ Ï§ë
                    }
                    
                    BlePhase.ReadingSettings -> {
                        Log.i(WR_EVENT, "[MainActivity] Í∏∞Í∏∞ ÏÑ§Ï†ï ÏùΩÎäî Ï§ë")
                        // ÏÑ§Ï†ï ÏùΩÍ∏∞ Ï§ë
                    }
                    
                    BlePhase.WritingTime -> {
                        Log.i(WR_EVENT, "[MainActivity] ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî Ï§ë")
                        // ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî Ï§ë
                    }
                    
                    BlePhase.Ready -> {
                        Log.i(WR_EVENT, "[MainActivity] BLE Ï§ÄÎπÑ ÏôÑÎ£å - Classic Discovery Ï§ëÏßÄ")
                        stopClassicDiscovery()
                        // ÏôÑÏ†ÑÌûà Ï§ÄÎπÑÎê®
                    }
                }
            }
        }
    }

    /**
     * ÏûêÎèô Ïó∞Í≤∞ ÏàòÌñâ
     */
    private suspend fun performAutoConnect() {
        try {
            val lastDevice = preferencesRepository.getLastConnectedDevice()
            if (lastDevice != null) {
                Log.i(
                    WR_EVENT,
                    "[MainActivity] Ï†ÄÏû•Îêú Í∏∞Í∏∞Î°ú ÏûêÎèô Ïó∞Í≤∞: ${lastDevice.name} (${lastDevice.address})"
                )

                // MAC Ï£ºÏÜå Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù (XX:XX:XX:XX:XX:XX ÌòïÏãù)
                val isValidMac =
                    lastDevice.address.matches(Regex("^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$"))
                if (!isValidMac) {
                    Log.e(WR_EVENT, "[MainActivity] ÏûòÎ™ªÎêú MAC Ï£ºÏÜå ÌòïÏãù: ${lastDevice.address}")
                    // ÏûòÎ™ªÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
                    preferencesRepository.clearConnectedDevice()
                    mainViewModel.updateConnectionState(false)
                    return
                }

                withContext(Dispatchers.Main) {
                    connectToDeviceByAddress(lastDevice.address)
                }
            } else {
                Log.w(WR_EVENT, "[MainActivity] Ï†ÄÏû•Îêú Í∏∞Í∏∞ Ï†ïÎ≥¥ ÏóÜÏùå")
                mainViewModel.updateConnectionState(false)
            }
        } catch (e: Exception) {
            Log.e(WR_EVENT, "[MainActivity] ÏûêÎèô Ïó∞Í≤∞ Ïã§Ìå®", e)
            mainViewModel.updateConnectionState(false)
        }
    }

    /**
     * H13 Í∏∞Í∏∞Ïù∏ÏßÄ ÌôïÏù∏
     * Service UUID f000efe0-0451-4000-0000-00000000b000 Ï°¥Ïû¨ Ïó¨Î∂ÄÎ°ú ÌåêÎã®
     */
    private fun isH13Device(gatt: BluetoothGatt): Boolean {
        val h13Service = gatt.getService(BleConstants.SERVICE_UUID)
        return h13Service != null
    }

    // 60Ï¥à Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ
    private fun startBatteryPolling() {
        if (batteryPollingJob?.isActive == true || !isH13Connected) {
            Log.i(WR_EVENT, "[BATTERY_DEBUG] Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅÏù¥ Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ë")
            return
        }

        Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== H13 Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ ÏãúÏûë =====")
        batteryPollingJob = lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                while (isActive && isH13Connected) {
                    if (bluetoothGatt?.device != null) {
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] ========================================")
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] 60Ï¥à Ï£ºÍ∏∞ Î∞∞ÌÑ∞Î¶¨ ÏöîÏ≤≠")
                        Log.i(
                            WR_EVENT,
                            "[BATTERY_DEBUG] ÏãúÍ∞Å: ${
                                SimpleDateFormat(
                                    "HH:mm:ss",
                                    Locale.getDefault()
                                ).format(Date())
                            }"
                        )
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] GATT Ïó∞Í≤∞ ÏÉÅÌÉú: ${bluetoothGatt != null}")
                        Log.i(
                            WR_EVENT,
                            "[BATTERY_DEBUG] ÎîîÎ∞îÏù¥Ïä§: ${bluetoothGatt?.device?.name} (${bluetoothGatt?.device?.address})"
                        )
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] ========================================")

                        requestBatteryLevel()
                    }

                    // Îã§Ïùå ÏöîÏ≤≠ÍπåÏßÄ 60Ï¥à ÎåÄÍ∏∞
                    if (isH13Connected) {
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Îã§Ïùå Î∞∞ÌÑ∞Î¶¨ ÏöîÏ≤≠ÍπåÏßÄ 60Ï¥à ÎåÄÍ∏∞...")
                        delay(60_000) // 60Ï¥à
                    }
                }

                Log.i(
                    WR_EVENT,
                    "[BATTERY_DEBUG] Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ Î£®ÌîÑ Ï¢ÖÎ£å (isActive=$isActive, isH13Connected=$isH13Connected)"
                )
            }
        }
        Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== Î∞∞ÌÑ∞Î¶¨ Ìè¥ÎßÅ Job ÏÉùÏÑ±Îê® =====")
    }

    // Î∞∞ÌÑ∞Î¶¨ ÏöîÏ≤≠
    private suspend fun requestBatteryLevel() = withContext(Dispatchers.IO) {
        Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== requestBatteryLevel ÏãúÏûë =====")

        bluetoothGatt?.let { gatt ->
            try {
                // MRD SDKÎ•º ÌÜµÌïú Î∞∞ÌÑ∞Î¶¨ ÏöîÏ≤≠ (Îß§Í∞úÎ≥ÄÏàò ÏóÜÏùå!)
                val commandData = Manridy.getMrdSend().getSystem(SystemEnum.battery)
                Log.i(WR_EVENT, "[BATTERY_DEBUG] MRD SDK Î™ÖÎ†π ÏÉùÏÑ±: ${commandData != null}")

                if (commandData?.datas != null) {
                    val service = gatt.getService(BleConstants.SERVICE_UUID)
                    val characteristic = service?.getCharacteristic(BleConstants.WRITE_CHAR_UUID)

                    Log.i(WR_EVENT, "[BATTERY_DEBUG] Service UUID: ${BleConstants.SERVICE_UUID}")
                    Log.i(WR_EVENT, "[BATTERY_DEBUG] Write UUID: ${BleConstants.WRITE_CHAR_UUID}")
                    Log.i(WR_EVENT, "[BATTERY_DEBUG] Service Ï∞æÏùå: ${service != null}")
                    Log.i(WR_EVENT, "[BATTERY_DEBUG] Characteristic Ï∞æÏùå: ${characteristic != null}")

                    characteristic?.let {
                        val command = commandData.datas
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Î™ÖÎ†πÏñ¥ ÌÅ¨Í∏∞: ${command?.size}")
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Î™ÖÎ†πÏñ¥ HEX: ${command?.toHexString()}")

                        it.value = command
                        val writeResult = gatt.writeCharacteristic(it)
                        Log.i(WR_EVENT, "[BATTERY_DEBUG] Write Í≤∞Í≥º: $writeResult")

                        if (writeResult) {
                            Log.i(WR_EVENT, "[BATTERY_DEBUG] ‚úÖ Î∞∞ÌÑ∞Î¶¨ Î™ÖÎ†π Ï†ÑÏÜ° ÏÑ±Í≥µ")
                        } else {
                            Log.e(WR_EVENT, "[BATTERY_DEBUG] ‚ùå Î∞∞ÌÑ∞Î¶¨ Î™ÖÎ†π Ï†ÑÏÜ° Ïã§Ìå®")
                        }
                    } ?: Log.e(WR_EVENT, "[BATTERY_DEBUG] CharacteristicÏù¥ nullÏûÑ")
                } else {
                    Log.e(WR_EVENT, "[BATTERY_DEBUG] MRD SDK Î™ÖÎ†π ÏÉùÏÑ± Ïã§Ìå®")
                    if (commandData == null) {
                        Log.e(WR_EVENT, "[BATTERY_DEBUG] commandDataÍ∞Ä null")
                    } else {
                        Log.e(WR_EVENT, "[BATTERY_DEBUG] commandData.datasÍ∞Ä null")
                    }
                }
            } catch (e: Exception) {
                Log.e(WR_EVENT, "[BATTERY_DEBUG] Î∞∞ÌÑ∞Î¶¨ ÏöîÏ≤≠ ÏòàÏô∏ Î∞úÏÉù", e)
            }
        } ?: Log.e(WR_EVENT, "[BATTERY_DEBUG] bluetoothGattÏù¥ nullÏûÑ")

        Log.i(WR_EVENT, "[BATTERY_DEBUG] ===== requestBatteryLevel ÏôÑÎ£å =====")
    }

    // ByteArrayÎ•º 16ÏßÑÏàò Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
    private fun ByteArray.toHexString() = joinToString("") { "%02X".format(it) }

    /**
     * Ïô∏Î∂ÄÏóêÏÑú Î∞∞ÌÑ∞Î¶¨ Î†àÎ≤® ÏöîÏ≤≠Ìï† Ïàò ÏûàÎäî public Ìï®Ïàò
     * HomeScreenÏóêÏÑú ÌôîÎ©¥ Ïû¨ÏßÑÏûÖ Ïãú ÏÇ¨Ïö©
     */
    fun refreshBatteryLevel() {
        if (bluetoothGatt != null) {
            Log.i(WR_EVENT, "[MainActivity] Î∞∞ÌÑ∞Î¶¨ Î†àÎ≤® ÏÉàÎ°úÍ≥†Ïπ® ÏöîÏ≤≠")
            lifecycleScope.launch {
                requestBatteryLevel()
            }
        } else {
            Log.w(WR_EVENT, "[MainActivity] BLE Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå - Î∞∞ÌÑ∞Î¶¨ ÏöîÏ≤≠ Î∂àÍ∞Ä")
        }
    }

    // Ïó∞Í≤∞ Ìï¥Ï†ú
    fun disconnectDevice() {
        Log.i(WR_EVENT, "[MainActivity] ÎîîÎ∞îÏù¥Ïä§ Ïó∞Í≤∞ Ìï¥Ï†ú")
        bluetoothGatt?.disconnect()
        bluetoothGatt?.close()
        bluetoothGatt = null
        h13Device = null
    }

    /**
     * Ïô∏Î∂ÄÏóêÏÑú Ìò∏Ï∂ú Í∞ÄÎä•Ìïú Í∏∞Í∏∞ Ïó∞Í≤∞ Î©îÏÑúÎìú
     * HomeScreen Îì±ÏóêÏÑú ÏÇ¨Ïö©
     */
    fun connectToDeviceByAddress(deviceAddress: String) {
        Log.i(WR_EVENT, "[MainActivity] Ïô∏Î∂Ä ÏöîÏ≤≠ Í∏∞Í∏∞ Ïó∞Í≤∞: $deviceAddress")
        actuallyConnectToDevice(deviceAddress)
    }

    override fun onDestroy() {
        mainViewModel.stopBleScan()
        disconnectDevice()
        super.onDestroy()
    }

    // ÎîîÎ∞îÏù¥Ïä§ ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî (ÌÖåÏä§Ìä∏Ïö© ÏãúÍ∞Ñ Î≤ÑÏ†Ñ)
    private suspend fun syncDeviceTime() {
        try {
            val today = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
            val lastSyncDate = preferencesRepository.getLastTimeSyncDate()

            if (lastSyncDate != today) {
                Log.i(WR_EVENT, "[TIME_SYNC] ===== ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî ÏãúÏûë =====")

                // ÌÖåÏä§Ìä∏Ïö© ÏãúÍ∞Ñ ÏÑ§Ï†ï: 2025ÎÖÑ 3Ïõî 3Ïùº Ïò§ÌõÑ 3Ïãú 33Î∂Ñ 33Ï¥à
                val testCalendar = Calendar.getInstance(TimeZone.getTimeZone("Asia/Seoul")).apply {
                    set(Calendar.YEAR, 2025)
                    set(Calendar.MONTH, 2)  // 3Ïõî (0Î∂ÄÌÑ∞ ÏãúÏûë)
                    set(Calendar.DAY_OF_MONTH, 3)
                    set(Calendar.HOUR_OF_DAY, 15)  // 24ÏãúÍ∞Ñ ÌòïÏãù
                    set(Calendar.MINUTE, 33)
                    set(Calendar.SECOND, 33)
                }

                val testTimeString = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                    .format(testCalendar.time)
                Log.i(WR_EVENT, "[TIME_SYNC] üïê ÌÖåÏä§Ìä∏ ÏãúÍ∞Ñ ÏÑ§Ï†ï: $testTimeString")
                Log.i(
                    WR_EVENT, "[TIME_SYNC] Year: ${testCalendar.get(Calendar.YEAR)}, " +
                            "Month: ${testCalendar.get(Calendar.MONTH) + 1}, " +
                            "Day: ${testCalendar.get(Calendar.DAY_OF_MONTH)}, " +
                            "Hour: ${testCalendar.get(Calendar.HOUR_OF_DAY)}, " +
                            "Minute: ${testCalendar.get(Calendar.MINUTE)}, " +
                            "Second: ${testCalendar.get(Calendar.SECOND)}"
                )

                // 2. ÎîîÎ∞îÏù¥Ïä§Ïóê ÏãúÍ∞Ñ ÏÑ§Ï†ï
                val timeRequest = Manridy.getMrdSend().setTime(testCalendar)
                if (timeRequest != null) {
                    val dataSize = timeRequest.datas?.size ?: 0
                    Log.i(WR_EVENT, "[TIME_SYNC] ÏãúÍ∞Ñ Î™ÖÎ†π Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞: $dataSize bytes")
                    if (dataSize > 0) {
                        Log.d(WR_EVENT, "[TIME_SYNC] Îç∞Ïù¥ÌÑ∞: ${timeRequest.datas.contentToString()}")
                    }
                }
                val timeSuccess = sendTimeData(timeRequest, "ÏãúÍ∞Ñ ÏÑ§Ï†ï")

                // 3. 24ÏãúÍ∞Ñ ÌòïÏãù ÏÑ§Ï†ï
                val formatRequest = Manridy.getMrdSend().setHourSelect(0)
                if (formatRequest != null) {
                    val formatDataSize = formatRequest.datas?.size ?: 0
                    Log.i(WR_EVENT, "[TIME_SYNC] 24ÏãúÍ∞Ñ ÌòïÏãù Î™ÖÎ†π Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞: $formatDataSize bytes")
                }
                val formatSuccess = sendTimeData(formatRequest, "24ÏãúÍ∞Ñ ÌòïÏãù ÏÑ§Ï†ï")

                // 4. ÏÑ§Ï†ï Í≤ÄÏ¶ù
                if (timeSuccess && formatSuccess) {
                    verifyTimeSettings(testTimeString)
                    preferencesRepository.setLastTimeSyncDate(today)
                    Log.i(WR_EVENT, "[TIME_SYNC] ‚úÖ ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî ÏôÑÎ£å! Í∏∞Í∏∞ ÏãúÍ∞ÑÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
                    Log.i(
                        WR_EVENT,
                        "[TIME_SYNC] ÏòàÏÉÅ ÌëúÏãú: 2025-03-03 15:33:33 ÎòêÎäî 2025ÎÖÑ 3Ïõî 3Ïùº Ïò§ÌõÑ 3:33:33"
                    )
                } else {
                    Log.e(
                        WR_EVENT,
                        "[TIME_SYNC] ‚ùå ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî Ïã§Ìå® (ÏãúÍ∞Ñ: $timeSuccess, ÌòïÏãù: $formatSuccess)"
                    )
                }

                Log.i(WR_EVENT, "[TIME_SYNC] ===========================")
            } else {
                Log.i(WR_EVENT, "[TIME_SYNC] Ïò§Îäò Ïù¥ÎØ∏ ÎèôÍ∏∞Ìôî ÏôÑÎ£åÎê® ($today)")
            }
        } catch (e: Exception) {
            Log.e(WR_EVENT, "[TIME_SYNC] ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî Ïò§Î•ò", e)
        }
    }

    // BLE Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ìó¨Ìçº Î©îÏÑúÎìú (Í∞úÏÑ† Î≤ÑÏ†Ñ)
    private suspend fun sendTimeData(request: Any?, operation: String): Boolean {
        return try {
            if (request == null) {
                Log.w(WR_EVENT, "[TIME_SYNC] ‚ö†Ô∏è $operation - requestÍ∞Ä nullÏûÖÎãàÎã§")
                return false
            }

            // MrdSendRequest ÌÉÄÏûÖ Ï≤¥ÌÅ¨
            val dataBytes = when (request) {
                is com.manridy.sdk_mrd2019.send.MrdSendRequest -> {
                    Log.d(WR_EVENT, "[TIME_SYNC] MrdSendRequest ÌÉÄÏûÖ ÌôïÏù∏Îê®")
                    request.datas
                }

                else -> {
                    // Ìè¥Î∞±: Î¶¨ÌîåÎ†âÏÖò ÏÇ¨Ïö© (Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ Ïú†ÏßÄ)
                    Log.d(WR_EVENT, "[TIME_SYNC] Î¶¨ÌîåÎ†âÏÖò ÏÇ¨Ïö© (ÌÉÄÏûÖ: ${request.javaClass.simpleName})")
                    try {
                        request.javaClass.getMethod("getDatas").invoke(request) as ByteArray
                    } catch (e: Exception) {
                        Log.e(WR_EVENT, "[TIME_SYNC] getDatas() Ìò∏Ï∂ú Ïã§Ìå®", e)
                        return false
                    }
                }
            }

            if (dataBytes == null || dataBytes.isEmpty()) {
                Log.e(WR_EVENT, "[TIME_SYNC] ‚ùå $operation - Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§")
                return false
            }

            bluetoothGatt?.let { gatt ->
                val service = gatt.getService(BleConstants.SERVICE_UUID)
                if (service == null) {
                    Log.e(WR_EVENT, "[TIME_SYNC] ‚ùå BLE ÏÑúÎπÑÏä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
                    return false
                }

                val writeChar = service.getCharacteristic(BleConstants.WRITE_CHAR_UUID)
                if (writeChar == null) {
                    Log.e(WR_EVENT, "[TIME_SYNC] ‚ùå Write characteristicÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
                    return false
                }

                // Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
                writeChar.value = dataBytes
                Log.d(WR_EVENT, "[TIME_SYNC] $operation - Ï†ÑÏÜ°Ìï† Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞: ${dataBytes.size} bytes")

                val success = gatt.writeCharacteristic(writeChar)

                if (success) {
                    delay(200) // BLE ÏïàÏ†ïÏÑ±ÏùÑ ÏúÑÌïú ÎîúÎ†àÏù¥
                    Log.i(WR_EVENT, "[TIME_SYNC] ‚úÖ $operation Ï†ÑÏÜ° ÏÑ±Í≥µ")
                    return true
                } else {
                    Log.w(WR_EVENT, "[TIME_SYNC] ‚ùå $operation Ï†ÑÏÜ° Ïã§Ìå®")
                    return false
                }
            } ?: run {
                Log.e(WR_EVENT, "[TIME_SYNC] ‚ùå BluetoothGattÍ∞Ä nullÏûÖÎãàÎã§")
                return false
            }
        } catch (e: Exception) {
            Log.e(WR_EVENT, "[TIME_SYNC] $operation Ï†ÑÏÜ° Ï§ë ÏòàÏô∏ Î∞úÏÉù", e)
            false
        }
    }

    // ÏãúÍ∞Ñ ÏÑ§Ï†ï Í≤ÄÏ¶ù
    private suspend fun verifyTimeSettings(sentTime: String) {
        try {
            delay(500) // ÏÑ§Ï†ï Î∞òÏòÅ ÎåÄÍ∏∞

            // 24ÏãúÍ∞Ñ ÌòïÏãù ÏÑ§Ï†ï ÌôïÏù∏ ÏöîÏ≤≠
            Manridy.getMrdSend().hourSelect
            // getHourSelect() ÏùëÎãµ Ï≤òÎ¶¨Îäî MRD SDK ÏΩúÎ∞±ÏóêÏÑú ÌôïÏù∏

            Log.i(WR_EVENT, "[TIME_VERIFY] Ï†ÑÏÜ°Ìïú ÏãúÍ∞Ñ: $sentTime")
            Log.i(WR_EVENT, "[TIME_VERIFY] 24ÏãúÍ∞Ñ ÌòïÏãù ÏÑ§Ï†ï ÏöîÏ≤≠ ÏôÑÎ£å")
            Log.i(WR_EVENT, "[TIME_VERIFY] üí° Ïã§Ï†ú ÎîîÎ∞îÏù¥Ïä§ ÏãúÍ∞ÑÏùÄ ÌôîÎ©¥ÏóêÏÑú ÌôïÏù∏ ÌïÑÏöî")

        } catch (e: Exception) {
            Log.e(WR_EVENT, "[TIME_VERIFY] Í≤ÄÏ¶ù Ïò§Î•ò", e)
        }
    }


    companion object {
        private const val WR_EVENT = "WR_EVENT"
    }
}